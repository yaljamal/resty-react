{"version":3,"sources":["components/form/form.js","components/header/header.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleUrl","e","url","target","value","setState","handleMethod","method","handleSubmit","preventDefault","state","request","alert","className","onSubmit","this","type","placeholder","onChange","name","onClick","React","Component","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUAkEeA,G,wDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgCNC,UAAY,SAACC,GACX,IAAMC,EAAMD,EAAEE,OAAOC,MACrB,EAAKC,SAAS,CAAEH,SAnCD,EAsCjBI,aAAe,SAACL,GACd,IAAMM,EAASN,EAAEE,OAAOC,MACxB,EAAKC,SAAS,CAAEE,YAxCD,EA2CjBC,aAAe,SAACP,GAEd,GADAA,EAAEQ,iBACG,EAAKC,MAAMR,KAAO,EAAKQ,MAAMH,OAAO,CACvC,IAAII,EAAU,CACZT,IAAK,EAAKQ,MAAMR,IAChBK,OAAQ,EAAKG,MAAMH,QAIrB,EAAKF,SAAS,CAACM,UAAST,IAFd,GAEmBK,OADhB,UAIbK,MAAM,wBArDV,EAAKF,MAAQ,CAAEH,OAAO,GAAIL,IAAI,GAAIS,QAAQ,IAFzB,E,qDAMjB,OACE,0BAAME,UAAU,QACd,0BAAMC,SAAUC,KAAKP,cAEnB,yBAAKK,UAAU,OACb,2BAAOA,UAAU,QAAQG,KAAK,OAAOC,YAAY,YAAYC,SAAUH,KAAKf,YAC5E,4BAAQgB,KAAK,UAAb,QAGF,yBAAKH,UAAU,OACb,0BAAMA,UAAU,UAAS,2BAAOA,UAAU,YAAaG,KAAK,QAAQG,KAAK,SAASf,MAAM,MAAKgB,QAASL,KAAKT,eAA3G,OACA,0BAAMO,UAAU,UAAU,2BAAOG,KAAK,QAAQG,KAAK,SAASf,MAAM,OAAMgB,QAASL,KAAKT,eAAtF,QACA,0BAAMO,UAAU,UAAS,2BAAOG,KAAK,QAAQG,KAAK,SAASf,MAAM,MAAKgB,QAASL,KAAKT,eAApF,OACA,0BAAMO,UAAU,UAAS,2BAAOG,KAAK,QAAQG,KAAK,SAASf,MAAM,SAAQgB,QAASL,KAAKT,eAAvF,YAKJ,yBAAKO,UAAU,WACb,wBAAIA,UAAW,gBAAgBE,KAAKL,MAAMC,QAAQJ,QAClD,wBAAIM,UAAU,aAAaE,KAAKL,MAAMC,QAAQT,IAA9C,W,GA3BSmB,IAAMC,YCQVC,G,MARA,WACb,OACE,gCACE,4CCKSC,G,MARA,WACb,OACE,gCACE,2CCaSC,MAVf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e19bfb08.chunk.js","sourcesContent":["import React from 'react';\nimport './form.scss';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { method:'', url:'', request:{} };\n  }\n\n  render() {\n    return (\n      <main className=\"main\">\n        <form onSubmit={this.handleSubmit}>\n\n          <div className=\"div\">\n            <input className=\"input\" type=\"text\" placeholder=\"Enter URL\" onChange={this.handleUrl} />\n            <button type=\"submit\">GO!</button>\n          </div>\n                 \n          <div className=\"div\">\n            <span className=\"method\"><input className=\"methodGet\"  type=\"radio\" name=\"method\" value=\"get\"onClick={this.handleMethod}/>GET</span>\n            <span className=\"method\" ><input type=\"radio\" name=\"method\" value=\"post\"onClick={this.handleMethod}/>POST</span>\n            <span className=\"method\"><input type=\"radio\" name=\"method\" value=\"put\"onClick={this.handleMethod}/>PUT</span>\n            <span className=\"method\"><input type=\"radio\" name=\"method\" value=\"delete\"onClick={this.handleMethod}/>DELETE</span>\n          </div>\n\n        </form>\n\n        <div className=\"results\">\n          <h3 className =\"methodOutput\">{this.state.request.method}</h3>  \n          <h3 className=\"urlOutput\">{this.state.request.url} </h3>\n        </div>\n          \n      </main>\n    );\n  }\n\n    handleUrl = (e) => {\n      const url = e.target.value;\n      this.setState({ url });//update the state + fire the render method\n    };\n\n    handleMethod = (e) => {\n      const method = e.target.value;\n      this.setState({ method });\n    };\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      if ( this.state.url && this.state.method){\n        let request = {\n          url: this.state.url,\n          method: this.state.method,\n        };  \n        let url = '';\n        let method = '';\n        this.setState({request, url, method});\n        // e.target.reset();\n      }else{\n        alert('missing information');\n      }\n    };\n  \n}\n\n\nexport default Form;","import React from 'react';\nimport './header.scss';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>RESTy App</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => {\n  return (\n    <footer>\n      <p>&copy; 2020</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","\nimport React from 'react';\nimport './App.scss';\nimport Form from './components/form/form';\nimport Header from './components/header/header';\nimport Footer from './components/footer/footer';\n\n\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Form />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}